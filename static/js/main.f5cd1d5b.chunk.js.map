{"version":3,"sources":["components/ui/Dice/DieFace.tsx","components/ui/Dice/Dice.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Pip","className","Face","children","DieFace","value","pips","Number","isInteger","Array","fill","map","_","i","key","ThreeDFaces","faces","number","classesToBeApplied","getFace","faceValue","Dice","inputValue","clickHandler","onClick","App","getRandomDiceValue","Math","floor","random","useState","diceValue","setDiceValue","Typography","variant","Grid","container","justify","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mSAGMA,G,kBAAO,kBAAM,0BAAMC,UAAU,UAG7BC,EAAO,SAAC,GAAD,IAAEC,EAAF,EAAEA,SAAF,OAA0B,yBAAKF,UAAU,QAAQE,IAmB/CC,EATC,SAAC,GAA4B,IAA3BC,EAA0B,EAA1BA,MACbC,EAAOC,OAAOC,UAAUH,GACzBI,MAAMJ,GACLK,KAAK,GACLC,KAAI,SAACC,EAAGC,GAAJ,OAAU,kBAAC,EAAD,CAAKC,IAAKD,OACzB,KACH,OAAO,kBAAC,EAAD,KAAOP,ICJTS,EAAc,WAClB,IAAMC,EAAQ,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAAGL,KAAI,SAACM,GACpC,IAAIC,EAAqB,qBAAuBD,EAChD,OACE,yBAAKH,IAAKG,EAAQhB,UAAWiB,GAC1BC,EAAQF,OAIf,OAAO,oCAAGD,IAGNG,EAAU,SAACC,GACf,OAAO,kBAAC,EAAD,CAASf,MAAOe,KAGVC,EAzBF,SAAC,GAA0C,IAAzCC,EAAwC,EAAxCA,WAAYC,EAA4B,EAA5BA,aAEzB,OACE,yBAAKtB,UAAS,oBAAeqB,GAAcE,QAASD,GAClD,kBAAC,EAAD,Q,gBCgBSE,MAvBf,WACE,IAAMC,EAAqB,WACzB,OAAOC,KAAKC,MAAsB,EAAhBD,KAAKE,SAAe,IAF3B,EAKmBC,mBAASJ,KAL5B,mBAKRK,EALQ,KAKGC,EALH,KAWb,OACE,yBAAK/B,UAAU,mBACb,kBAACgC,EAAA,EAAD,CAAYC,QAAQ,MAApB,QACA,kBAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAQ,UACtB,yBAAKpC,UAAU,aACb,kBAAC,EAAD,CAAMqB,WAAYS,EAAWR,aAAc,WARjDS,EAAaN,YCFGY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.f5cd1d5b.chunk.js","sourcesContent":["import React  from \"react\";\nimport './DieFace.css';\n\nconst Pip  = () => <span className=\"pip\" />;\n\n\nconst Face = ({children}:FaceProps) => <div className=\"face\">{children}</div>;\n\ntype DieFaceProps={\n    value:number\n}\n\ntype FaceProps={\n    children: any[]|null\n}\n\nconst DieFace = ({value} :DieFaceProps ) => {\n\tlet pips = Number.isInteger(value)\n\t\t? Array(value)\n\t\t\t\t.fill(0)\n\t\t\t\t.map((_, i) => <Pip key={i} />)\n\t\t: null;\n\treturn <Face>{pips}</Face>;\n};\n\nexport default DieFace;\n\n","import React from \"react\";\nimport \"./Dice.css\";\nimport DieFace from \"./DieFace\";\n\ntype DiceProps={\n  inputValue: number;\n  clickHandler: ()=>void;\n}\n\nconst Dice = ({inputValue, clickHandler}:DiceProps) => {\n\n  return (\n    <div className={`dice show-${inputValue}`} onClick={clickHandler}  >\n      <ThreeDFaces />\n    </div>\n  );\n};\n\nconst ThreeDFaces = () => {\n  const faces = [1, 2, 3, 4, 5, 6].map((number) => {\n    let classesToBeApplied = \"die-item die-item-\" + number;\n    return (\n      <div key={number} className={classesToBeApplied}>\n        {getFace(number)}\n      </div>\n    );\n  });\n  return <>{faces}</>;\n};\n\nconst getFace = (faceValue: number) => {\n  return <DieFace value={faceValue} />;\n};\n\nexport default Dice;\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport Dice from \"./components/ui/Dice/Dice\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { Grid } from \"@material-ui/core\";\n\nfunction App() {\n  const getRandomDiceValue = (): number => {\n    return Math.floor(Math.random() * 6 + 1);\n  };\n\n  let [diceValue, setDiceValue] = useState(getRandomDiceValue());\n\n  const handleClick = () => {\n    setDiceValue(getRandomDiceValue());\n  };\n\n  return (\n    <div className=\"App text-center\">\n      <Typography variant=\"h2\">LUDO</Typography>\n      <Grid container justify=\"center\">\n        <div className=\"dice-box \">\n          <Dice inputValue={diceValue} clickHandler={() => handleClick()} />\n        </div>\n      </Grid>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}